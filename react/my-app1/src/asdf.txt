React Router Examples for Freshers
1. Install React Router
Before using React Router, install it in your React project:

npm install react-router-dom
2. Basic Example with BrowserRouter
This example demonstrates basic navigation using react-router-dom.

Steps:
Create a Home and About component.
Use Routes and Route inside App.js to define paths.
Use Link for navigation.
Code:
App.js
import React from "react";
import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom";

// Simple components
const Home = () => <h2>Home Page</h2>;
const About = () => <h2>About Page</h2>;

function App() {
  return (
    <Router>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          <li><Link to="/about">About</Link></li>
        </ul>
      </nav>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
      </Routes>
    </Router>
  );
}

export default App;
3. Nested Routes Example
This example shows how to use nested routes with Outlet.

Steps:
Create a Dashboard component.
Inside Dashboard, use Outlet to render nested routes.
Code:
App.js

import React from "react";
import { BrowserRouter as Router, Routes, Route, Link, Outlet } from "react-router-dom";

const Home = () => <h2>Home Page</h2>;
const Dashboard = () => (
  <div>
    <h2>Dashboard</h2>
    <nav>
      <ul>
        <li><Link to="profile">Profile</Link></li>
        <li><Link to="settings">Settings</Link></li>
      </ul>
    </nav>
    <Outlet />
  </div>
);

const Profile = () => <h3>Profile Page</h3>;
const Settings = () => <h3>Settings Page</h3>;

function App() {
  return (
    <Router>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          <li><Link to="/dashboard">Dashboard</Link></li>
        </ul>
      </nav>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/dashboard" element={<Dashboard />}>
          <Route path="profile" element={<Profile />} />
          <Route path="settings" element={<Settings />} />
        </Route>
      </Routes>
    </Router>
  );
}

export default App;
4. Redirect and Not Found Page
This example demonstrates:

Redirecting users to another page using <Navigate />
Handling 404 Not Found pages.
Code:
App.js
import React from "react";
import { BrowserRouter as Router, Routes, Route, Link, Navigate } from "react-router-dom";

const Home = () => <h2>Home Page</h2>;
const About = () => <h2>About Page</h2>;
const NotFound = () => <h2>404 - Page Not Found</h2>;

function App() {
  return (
    <Router>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          <li><Link to="/about">About</Link></li>
        </ul>
      </nav>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/old-about" element={<Navigate to="/about" />} />
        <Route path="*" element={<NotFound />} />
      </Routes>
    </Router>
  );
}

export default App;
5. Protected Routes Example
This example shows how to protect routes using authentication.

Steps:
Create a ProtectedRoute component.
If the user is not logged in, redirect them to /login.
Code:
ProtectedRoute.js
import React from "react";
import { Navigate } from "react-router-dom";

const ProtectedRoute = ({ children }) => {
  const isAuthenticated = false; // Change to true to allow access
  return isAuthenticated ? children : <Navigate to="/login" />;
};

export default ProtectedRoute;
App.js
import React from "react";
import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom";
import ProtectedRoute from "./ProtectedRoute";

const Home = () => <h2>Home Page</h2>;
const Dashboard = () => <h2>Dashboard - Protected</h2>;
const Login = () => <h2>Login Page</h2>;

function App() {
  return (
    <Router>
      <nav>
        <ul>
          <li><Link to="/">Home</Link></li>
          <li><Link to="/dashboard">Dashboard</Link></li>
          <li><Link to="/login">Login</Link></li>
        </ul>
      </nav>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={<Login />} />
        <Route path="/dashboard" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />
      </Routes>
    </Router>
  );
}

export default App;
Summary
✅ Basic Routing: <Routes>, <Route>, and <Link>.
✅ Nested Routes: <Outlet> inside parent components.
✅ Redirects & 404: <Navigate to="/new-path" /> and handling unknown routes.
✅ Protected Routes: Restrict access to certain pages.



What is useContext in React.js?
useContext is a built-in React Hook that allows you to access and share values between components without passing props manually at every level.

Why Was useContext Introduced?
Before useContext, React applications relied heavily on prop drilling to pass data from a parent component to deeply nested child components. This approach became cumbersome and made code harder to maintain.

Does useContext Overcome Prop Drilling?
Yes, useContext eliminates the need for prop drilling by allowing components to access the shared state directly from a React Context without passing props manually.

Example of Prop Drilling (Without useContext)
Scenario: Passing a user name from App (Parent) to ProfileDetails (Nested Child)
Without useContext (Using Prop Drilling)
import React from "react";

const App = () => {
  const user = "John Doe"; // Data at top-level component

  return <Parent user={user} />;
};

const Parent = ({ user }) => {
  return <Child user={user} />;
};

const Child = ({ user }) => {
  return <ProfileDetails user={user} />;
};

const ProfileDetails = ({ user }) => {
  return <h2>User: {user}</h2>;
};

export default App;
Explanation:
The user prop is passed from App → Parent → Child → ProfileDetails.
If more intermediate components were added, we would have to manually pass user through all of them, leading to prop drilling.
Same Example Using useContext (Avoiding Prop Drilling)
Steps to Implement useContext
Create a Context for storing user data.
Provide Context at a higher level in the component tree.
Consume Context in deeply nested components.
Example Using useContext
import React, { createContext, useContext } from "react";

// Step 1: Create Context
const UserContext = createContext();

const App = () => {
  const user = "John Doe";

  return (
    // Step 2: Provide Context
    <UserContext.Provider value={user}>
      <Parent />
    </UserContext.Provider>
  );
};

const Parent = () => {
  return <Child />;
};

const Child = () => {
  return <ProfileDetails />;
};

const ProfileDetails = () => {
  // Step 3: Consume Context
  const user = useContext(UserContext);
  return <h2>User: {user}</h2>;
};

export default App;
How useContext Solves Prop Drilling?
Feature	Prop Drilling	useContext
Data Passing	Passed manually via props	Accessed directly from context
Scalability	Becomes complex with more components	Easily manageable
Code Readability	Cluttered with repeated props	Clean and maintainable
Final Thoughts
useContext is best suited for avoiding prop drilling in small to medium applications.
For larger applications with complex state, Redux or React Query might be a better choice.